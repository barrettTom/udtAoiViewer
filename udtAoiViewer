#!/usr/bin/python3

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QAction, QTreeView, QHeaderView, QFileDialog, QSplitter

from lib.TreeModel import TreeModel
import sys

class udtAoiViewer(QMainWindow):
    def __init__(self):
        super().__init__()

        self.frame = QSplitter()
        self.setCentralWidget(self.frame)

        self.projectView = QTreeView(self) 
        self.templateView = QTreeView(self) 

        self.projectView.header().setSectionResizeMode(QHeaderView.ResizeToContents)
        self.templateView.header().setSectionResizeMode(QHeaderView.ResizeToContents)

        self.templateView.header().hide()
        self.projectView.header().hide()

        self.frame.addWidget(self.projectView)
        self.frame.addWidget(self.templateView)

        self.projectModel = False
        self.templateModel = False

        menu = self.menuBar()
        fileMenu = menu.addMenu('&File')
        viewMenu = menu.addMenu('&View')

        openProjectButton = QAction("&Open Project", self)
        openProjectButton.triggered.connect(self.openProject)
        fileMenu.addAction(openProjectButton)

        openTemplateButton = QAction("&Open Template", self)
        openTemplateButton.triggered.connect(self.openTemplate)
        fileMenu.addAction(openTemplateButton)

        highlightButton = QAction("&Highlight Inconsistencies", self)
        highlightButton.triggered.connect(self.highlight)
        viewMenu.addAction(highlightButton)

        syncButton = QAction("&Sync Scroll", self)
        syncButton.triggered.connect(self.toggleSync)
        viewMenu.addAction(syncButton)

        excoButton = QAction("&Expand/Collapse All", self)
        excoButton.triggered.connect(self.toggleExco)
        viewMenu.addAction(excoButton)
        self.expanded = False

        self.syncScrolled = False
        self.templateView.verticalScrollBar().valueChanged.connect(lambda : self.syncScroll("t"))
        self.projectView.verticalScrollBar().valueChanged.connect(lambda : self.syncScroll("p"))

        if len(sys.argv) == 3:
            self.openTemplate(sys.argv[1])
            self.openProject(sys.argv[2])

        self.show()

    def openProject(self, f = None):
        if not f:
            path = QFileDialog.getOpenFileName(self)[0]
        else:
            path = f

        if path:
            self.projectModel = TreeModel(path)
            self.projectView.setModel(self.projectModel)

    def openTemplate(self, f = None):
        if not f:
            path = QFileDialog.getOpenFileName(self)[0]
        else:
            path = f

        if path:
            self.templateModel = TreeModel(path)
            self.templateView.setModel(self.templateModel)

    def toggleSync(self):
        self.syncScrolled = not self.syncScrolled

    def toggleExco(self):
        self.expanded = not self.expanded
        if self.expanded:
            self.templateView.expandAll()
            self.projectView.expandAll()
        else:
            self.templateView.collapseAll()
            self.projectView.collapseAll()

    def syncScroll(self, view):
        if self.syncScrolled:
            if view == "t":
                sliderValue = self.templateView.verticalScrollBar().value()
                self.projectView.verticalScrollBar().setValue(sliderValue)
            elif view == "p":
                sliderValue = self.projectView.verticalScrollBar().value()
                self.templateView.verticalScrollBar().setValue(sliderValue)

    def highlight(self):
        if self.projectModel and self.templateModel:
            projectUdtRoot, projectAoiRoot = self.projectModel.highlight()
            templateUdtRoot, templateAoiRoot = self.templateModel.highlight()

            self.checkAois(projectAoiRoot, templateAoiRoot)
            self.checkUdts(projectUdtRoot, templateUdtRoot)

    def checkAois(self, projectAoiRoot, templateAoiRoot):
            for i in range(projectAoiRoot.childCount()):
                pChild = projectAoiRoot.child(i)
                good = False
                for j in range(templateAoiRoot.childCount()):
                    tChild = templateAoiRoot.child(j)
                    if pChild.data(0) == tChild.data(0):
                        if pChild.data(1) == tChild.data(1):
                            if pChild.data(2) == tChild.data(2):
                                good = True
                if not good:
                    pChild.giveRed(True)

            for i in range(templateAoiRoot.childCount()):
                tChild = templateAoiRoot.child(i)
                good = False
                for j in range(projectAoiRoot.childCount()):
                    pChild = projectAoiRoot.child(j)
                    if pChild.data(0) == tChild.data(0):
                        if pChild.data(1) == tChild.data(1):
                            if pChild.data(2) == tChild.data(2):
                                good = True
                if not good:
                    tChild.giveRed(True)

    def checkUdts(self, projectUdtRoot, templateUdtRoot):
            for i in range(projectUdtRoot.childCount()):
                pChild = projectUdtRoot.child(i)
                good = False
                for j in range(templateUdtRoot.childCount()):
                    tChild = templateUdtRoot.child(j)
                    if pChild.data(0) == tChild.data(0):
                        self.checkMembers(tChild, pChild)
                        if pChild.data(1) == tChild.data(1):
                            if pChild.data(2) == tChild.data(2):
                                good = True

                if not good:
                    pChild.giveRed(True)

            for i in range(templateUdtRoot.childCount()):
                tChild = templateUdtRoot.child(i)
                good = False
                for j in range(projectUdtRoot.childCount()):
                    pChild = projectUdtRoot.child(j)
                    if pChild.data(0) == tChild.data(0):
                        self.checkMembers(tChild, pChild)
                        if pChild.data(1) == tChild.data(1):
                            if pChild.data(2) == tChild.data(2):
                                good = True

                if not good:
                    tChild.giveRed(True)

    def checkMembers(self, tUdt, pUdt):
        for i in range(tUdt.childCount()):
            tMem = tUdt.child(i)
            good = False
            for j in range(pUdt.childCount()):
                pMem = pUdt.child(j)
                if pMem.data(0) == tMem.data(0):
                    if pMem.data(1) == tMem.data(1):
                        if pMem.data(2) == tMem.data(2):
                            good = True

            if not good:
                tMem.giveRed(True)

        for i in range(pUdt.childCount()):
            pMem = pUdt.child(i)
            good = False
            for j in range(tUdt.childCount()):
                tMem = tUdt.child(j)
                if pMem.data(0) == tMem.data(0):
                    if pMem.data(1) == tMem.data(1):
                        if pMem.data(2) == tMem.data(2):
                            good = True

            if not good:
                pMem.giveRed(True)

app = QApplication(sys.argv)
masterView = udtAoiViewer()
sys.exit(app.exec_())
